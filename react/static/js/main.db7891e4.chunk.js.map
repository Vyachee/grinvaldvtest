{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CITIES","name","zip","WeatherDisplay","state","weatherData","URL","this","props","console","log","fetch","then","res","json","setState","wd","status","weather","main","temperature","Math","round","temp","feels_like","pressure","windSpeed","wind","speed","iconUrl","icon","className","src","alt","description","React","Component","App","activePlace","isActive","index","defaultClassess","Navbar","sticky","bg","Brand","Container","Row","Col","md","sm","map","place","NavItem","key","eventKey","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db7891e4.chunk.js","sourcesContent":["import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Navbar, NavItem, Container, Row, Col} from \"react-bootstrap\";\nimport './App.css';\n\nconst CITIES = [\n    { name: 'Челябинск', zip: '454052' },\n    { name: 'Москва', zip: '101000' },\n    { name: 'Санкт-Петербург', zip: '187021' },\n    { name: 'Казань', zip: '420070' },\n    { name: 'Астрахань', zip: '414000' },\n    { name: 'Белгород', zip: '308000' },\n    { name: 'Брянск ', zip: '241000' },\n];\nconst API_TOKEN = \"2ba7a957c576a6db136e463de919287f\";\n\nclass WeatherDisplay extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            weatherData: null\n        };\n    }\n    componentDidMount() {\n        const zip = this.props.zip;\n        const URL = \"http://api.openweathermap.org/data/2.5/weather?q=\"\n            + zip +\n            \"&appid=\"+ API_TOKEN +\"&lang=ru&units=metric\";\n        console.log(URL);\n        fetch(URL).then(res => res.json()).then(json => {\n            this.setState({ weatherData: json });\n        });\n    }\n\n    render() {\n        const wd = this.state.weatherData;\n        if (!wd) return <p>Loading</p>;\n        let status = wd.weather[0].main;\n        if(status === 'Clouds') status = \"Облачно\";\n        if(status === 'Snow') status = \"Снег\";\n        if(status === 'Rain') status = \"Дождь\";\n        let temperature = Math.round(wd.main.temp);\n        let name = wd.name;\n        let feels_like = Math.round(wd.main.feels_like);\n        let pressure = wd.main.pressure;\n        let windSpeed = wd.wind.speed;\n        const iconUrl = \"http://openweathermap.org/img/w/\" + wd.weather[0].icon + \".png\";\n        return (\n            <div className=\"text-left\">\n                <h1>\n                    {status} в {name}\n                    <img src={iconUrl} className=\"mt-1\" alt={wd.weather[0].description} />\n                </h1>\n                <div className=\"text-large\">\n                    <p className=\"p-2\">Текущая температура: <b>{temperature} &#176;С</b> (Ощущается как <b>{feels_like} &#176;С</b>)</p>\n                    <p className=\"p-2\">Скорость ветра: <b>{windSpeed} м/с</b></p>\n                    <p className=\"p-2\">Давление: <b>{pressure} торр</b></p>\n                </div>\n            </div>\n        );\n  }\n}\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            activePlace: 0\n        };\n    }\n    render() {\n    const activePlace = this.state.activePlace;\n    function isActive(index, activePlace) {\n        let defaultClassess = \"rounded mb-1 bg-dark text-white p-3 pl-3 pr-3 btn d-block text-left\";\n        if(index != activePlace) return defaultClassess;\n        else return defaultClassess + \" active\";\n    }\n    return (\n        <div className=\"App\">\n            <Navbar\n            sticky\n            bg=\"dark\">\n                <Navbar.Brand className=\"text-white\">\n                    GWeather\n                </Navbar.Brand>\n            </Navbar>\n            <Container className=\"pt-3 pb-3 bg-white\">\n                <Row>\n                    <Col md={4} sm={4}>\n                        <h3 className=\"text-left\">Выбрать город:</h3>\n                        <div className=\"pt-2\">\n                            {CITIES.map((place, index) => (\n                                <NavItem\n                                    className={\n                                        isActive(index, activePlace)\n                                    }\n                                    key={index}\n                                    eventKey={index}\n                                    onClick={() => {\n                                        this.setState({ activePlace: index });\n                                    }}>{place.name}</NavItem>\n                            ))}\n                        </div>\n                    </Col>\n                    <Col md={8} sm={8} className=\"border-left\">\n                        <WeatherDisplay key={activePlace} zip={CITIES[activePlace].zip} />\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}